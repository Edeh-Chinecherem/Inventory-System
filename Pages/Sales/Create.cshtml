@page
@using Microsoft.AspNetCore.SignalR;
@using InventorySystem.Models;
@model InventorySystem.Pages.Sales.CreateModel
@using System.Text.Json

@{
    ViewData["Title"] = "Create Sale";
    var productsJson = JsonSerializer.Serialize(Model.AvailableProducts);
}

<h2 class="text-center text-primary my-4">Create Sale</h2>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <form method="post" class="border p-4 shadow-sm rounded bg-light">

                <div class="mb-4">
                    <label class="form-label fw-bold text-secondary">Products (select and specify quantity):</label>
                    <div id="itemsContainer"></div>
                    <button type="button" onclick="addItem()" class="btn btn-outline-primary mt-2">Add Product</button>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-success">Submit Sale</button>
                </div>

            </form>
        </div>
    </div>
</div>

<!-- Serialize available products into JavaScript -->
<script>
    const availableProducts = @Html.Raw(productsJson);
    let counter = 0;
    const container = document.getElementById('itemsContainer');

    function addItem() {
        const index = counter++;

        let options = availableProducts.map(p =>
            `<option value="${p.Id}" data-price="${p.Price}" data-name="${p.ProductName}">
                ${p.ProductName} ($${p.Price})
            </option>`
        ).join("");

        const itemHtml = `
            <div class="border rounded p-3 mb-3 bg-white shadow-sm sale-item">
                <div class="row g-2 align-items-end">
                    <div class="col-md-4">
                        <label class="form-label">Product:</label>
                        <select name="Items[${index}].ProductId" class="form-select product-dropdown" data-index="${index}" required>
                            <option value="">Select Product</option>
                            ${options}
                        </select>
                        <input type="hidden" name="Items[${index}].ProductName" class="product-name-${index}" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Quantity:</label>
                        <input name="Items[${index}].Quantity" type="number" class="form-control" required />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Price:</label>
                        <input name="Items[${index}].Price" type="number" step="0.01" class="form-control price-field-${index}" required readonly />
                    </div>
                </div>
            </div>
        `;

        container.insertAdjacentHTML('beforeend', itemHtml);
    }

    document.addEventListener('change', function (e) {
        if (e.target.classList.contains('product-dropdown')) {
            const selectedOption = e.target.selectedOptions[0];
            const price = selectedOption.getAttribute('data-price');
            const name = selectedOption.getAttribute('data-name');
            const index = e.target.getAttribute('data-index');

            document.querySelector(`.price-field-${index}`).value = price;
            document.querySelector(`.product-name-${index}`).value = name;
        }
    });
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
